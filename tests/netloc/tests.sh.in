#!/bin/bash
#
# Copyright © 2016 Inria.  All rights reserved.
# See COPYING in top-level directory.
#

HWLOC_top_builddir="@HWLOC_top_builddir@"

NETLOC_TESTS_PATH="$HWLOC_top_builddir/tests/netloc"

NETLOC_UTIL_PATH="$HWLOC_top_builddir/utils/netloc"

red=$(tput setaf 1)
green=$(tput setaf 2)
default=$(tput sgr0)

function write_output
{
    color=$1
    shift
    echo $@ | sed "s/.*/$color&$default/"
}

function quit
{
    write_output $red "Test failed"
    rm -fr $TEMPDIR
}

function getvalues
{
    for i in $@; do
        echo "$params" | $GREP -P "^\s*$1:" | $SED 's/^.*:\s*//'
    done | tr '\n' ' '
}

function getCopies
{
    local t=$1
    local copies=$(getvalues copy copy_${t})
    for f in $copies; do
        local name=$(echo $f | $SED 's/\([^=]*\)\(=.*\)\?/\1/')
        local ext=$(echo $f | $SED 's/\([^=]*\)\(=.*\)\?/\2/')
        if [ -z "$ext" ]; then
            test -e $REFDIR/$name || cp -r "$NETLOC_TESTS_PATH/data/$name" "$REFDIR"
        elif [ "$ext" = "=txz" ]; then
            # TODO prevent from extracting it again
            tar --use-compress-program=$COMPRESS -xf "$NETLOC_TESTS_PATH/data/$name.txz" -C "$REFDIR"
        fi
    done
}


trap 'quit' 0
set -e

compress=xz
hash $compress 2>/dev/null || \
    { echo >&2 "It requires $compressbin but it's not installed."; exit 1; }
COMPRESS=$(which $compress)
GREP=$(which grep)
SED=$(which sed)
AWK=$(which awk)

# Folder structure like that
# TEMPDIR
# ├── ref <- copy of the data directory
# │   ├── machine1
# │   │   └── file1
# │   └── machine2
# │       └── file1
# └── test
#     └── file1
TEMPDIR=$(mktemp -d)
TESTDIR=$TEMPDIR/tests
REFDIR=$TEMPDIR/ref && mkdir $REFDIR
TESTFILE=$REFDIR/tests.txt; cp $NETLOC_TESTS_PATH/data/tests.txt $REFDIR

# Remove comments from the test file
$SED -i 's/#.*$//g; /^\s*$/d' $TESTFILE

# Get tests
tests=$($GREP -P "^[^\s]*:\s*" $TESTFILE | $SED 's/:\s*$//')

S=0
F=0

for t in $tests; do
    params_sv=$($AWK '/^'$t':\s*$/{flag=1;next} /^\S*:\s*$/{flag=0}flag' $TESTFILE)
    params="$params_sv"
    sets=$(getvalues testset)

    # For each set to test
    for s in $sets; do
        NETLOC_TEST=$s
        params="$(echo "$params_sv" | $SED 's/%/'$NETLOC_TEST'/g')"
        mkdir $TESTDIR

        # Copy or extract files if needed
        getCopies $s

        # Copy needed files
        cd "$REFDIR"
        needed=$(getvalues needed)
        if [ -z "needed" ]; then
            cp -r $s $TESTDIR
        else
            files=$(eval "echo \"$needed\"")
            for f in $files; do
                cp -r --parents "$f" "$TESTDIR"
            done
        fi

        # Remove excluded files
        cd "$TESTDIR"
        excluded=$(getvalues excluded)
        if [ -n "$excluded" ]; then
            files=$(eval "echo \"$excluded\"")
            for f in $files; do
                rm -f "$f"
            done
        fi

        while true; do
            # Remove output files
            cd $TESTDIR
            for cf in $checkfiles; do
                files=$(eval "echo \"$cf\"")
                for f in $files; do
                    rm -f "$f"
                done
            done

            # Execute the command
            cd $TESTDIR
            cmd=$(getvalues command)
            eval " $cmd" > /dev/null || \
                {
                    eval "echo \"Command $cmd failed\""
                    write_output $red "Test $t on $NETLOC_TEST failed!"
                    failed=1
                    break
                }

            # Check files
            cd "$REFDIR"
            checkfiles=$(getvalues checkfiles)
            for cf in $checkfiles; do
                files=$(eval "echo \"$cf\"")
                for f in $files; do
                    cmp "$f" "$TESTDIR/$f" || \
                        {
                            echo "$f: wrong file"
                            eval "echo \"Command was: $cmd\""
                            write_output $red "Test $t on $NETLOC_TEST failed!"
                            failed=1
                            break
                        }
                done
            done
            if [ "$failed" = 1 ]; then break; fi

            # Check program
            cd $TESTDIR
            checkcmd=$(getvalues checkcommand)
            eval " $checkcmd" > /dev/null || \
                {
                    echo "Check command failed: $checkcmd"
                    eval "echo \"Command was: $cmd\""
                    write_output $red "Test $t on $NETLOC_TEST failed!"
                    failed=1
                    break
                }

            break
        done

        rm -fr $TESTDIR
        if [ -n "$failed" ]; then
            ((F+=1))
        else
            ((S+=1))
        fi
        failed=
    done
done

if [[ $F -ne O ]]; then
    color=$red
    returncode=1
else
    color=$green
    returncode=0
fi
echo "### Summary ###"
write_output $color "$F tests failed"
write_output $green "$S tests succeeded"
trap 0
rm -fr $TEMPDIR
exit $returncode
