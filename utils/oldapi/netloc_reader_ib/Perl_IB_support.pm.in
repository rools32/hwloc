#!/usr/bin/perl

#
# Copyright Â© 2013      University of Wisconsin-La Crosse.
#                         All rights reserved.
#
# See COPYING in top-level directory.
#
# $HEADER$
#

#
# Header to assist in the parsing of the InfiniBand data
#

use strict;
use warnings;

########################################################################
####                   Public Variables                             ####
########################################################################
# Database file extensions storing the parsed information.
$Support::logical_prep   = "log_prep.dat";


########################################################################
####                   Public Functions                             ####
########################################################################

sub phy_id_normalizer {
    die "\"phy_id_normalizer\" usage: <phy id>"
        unless scalar @_ == 1   and
            "" eq ref $_[0];

    my ($phy_id) = @_;

    if($phy_id =~  m/
                        \A                  # Start of string
                        0x                  # Hex string, 0x form
                        ([0-9A-Fa-f]{4})    # 4 hex digit group
                        ([0-9A-Fa-f]{4})    # 4 hex digit group
                        ([0-9A-Fa-f]{4})    # 4 hex digit group
                        ([0-9A-Fa-f]{4})    # 4 hex digit group
                        \Z                  # End of string
                    /x
        )
    {
        return "$1:$2:$3:$4";
    }

    return $phy_id;
}

########################################################################
####                   Public Structs                               ####
########################################################################

package Node;

use Class::Struct;

struct(
    network_type => '$', # Flag for network type
                         #  ETH - Ethernet
                         #  IB  - Infiniband
    type         => '$', # CA (Host) or SW (Switch)
    log_id       => '$', # Logical ID for the port
                         #  NOTE: It is assumed that a port has only a
                         #   single logical id
    phy_id       => '$', # Physical ID for the port. Must uniquely
                         #  identify the port.
    subnet_id    => '$',
    connections  => '%', # Hash of Node->phy_id (of the connected Node)
                         #  to an array of Edge structs. An array is
                         #  used to account for the possibility of
                         #  multiple edges between two Nodes.
    description  => '$'
);

#
# Note: These must match those keys declared in perl_json_support.h
#
sub TO_JSON {
    return
        {
            "network_type" => $_[0]->network_type,
            "type"         => $_[0]->type,
            "log_id"       => $_[0]->log_id,
            "phy_id"       => $_[0]->phy_id,
            "subnet_id"    => $_[0]->subnet_id,
            "connections"  => $_[0]->connections,
            "description"  => $_[0]->description
        };
}

########################################################################

package Edge;

use Class::Struct;

struct(
    port_from      => '$', # Node->phy_id
    port_id_from   => '$',
    port_type_from => '$', # Node->type

    width          => '$',
    speed          => '$',
    gbits          => '$',

    port_to        => '$', # Node->phy_id
    port_id_to     => '$',
    port_type_to   => '$', # Node->type
    description    => '$'

);

#
# Note: These must match those keys declared in perl_json_support.h
#
sub TO_JSON {
    return
        {
            "port_from"      => $_[0]->port_from,
            "port_id_from"   => $_[0]->port_id_from,
            "port_type_from" => $_[0]->port_type_from,
            "width"          => $_[0]->width,
            "speed"          => $_[0]->speed,
            "gbits"          => $_[0]->gbits,
            "port_to"        => $_[0]->port_to,
            "port_id_to"     => $_[0]->port_id_to,
            "port_type_to"   => $_[0]->port_type_to,
            "description"    => $_[0]->description
        };
}

1;
